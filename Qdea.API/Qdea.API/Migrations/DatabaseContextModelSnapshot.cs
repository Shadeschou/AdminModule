// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Qdea.Back.Models;

namespace Qdea.API.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Qdea.Back.Domain.AddedUser", b =>
                {
                    b.Property<int>("AddedUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("IdeaID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("AddedUserID");

                    b.HasIndex("IdeaID");

                    b.HasIndex("UserID");

                    b.ToTable("AddedUsers");
                });

            modelBuilder.Entity("Qdea.Back.Domain.Effort", b =>
                {
                    b.Property<int>("EffortID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EffortID");

                    b.ToTable("Efforts");
                });

            modelBuilder.Entity("Qdea.Back.Domain.Idea", b =>
                {
                    b.Property<int>("IdeaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateLastEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Effort")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdeaStatusID")
                        .HasColumnType("int");

                    b.Property<string>("Impact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriorityID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("IdeaID");

                    b.HasIndex("IdeaStatusID");

                    b.HasIndex("PriorityID");

                    b.HasIndex("UserID");

                    b.ToTable("Ideas");
                });

            modelBuilder.Entity("Qdea.Back.Domain.IdeaInteraction", b =>
                {
                    b.Property<int>("IdeaInteractionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdeaID")
                        .HasColumnType("int");

                    b.Property<int?>("IdeaInteractionTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastDateTimeEdited")
                        .HasColumnType("datetime2");

                    b.Property<string>("TextContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("IdeaInteractionID");

                    b.HasIndex("IdeaID");

                    b.HasIndex("IdeaInteractionTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("IdeaInteractions");
                });

            modelBuilder.Entity("Qdea.Back.Domain.IdeaInteractionType", b =>
                {
                    b.Property<int>("IdeaInteractionTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdeaInteractionTypeID");

                    b.ToTable("IdeaInteractionTypes");
                });

            modelBuilder.Entity("Qdea.Back.Domain.IdeaStatus", b =>
                {
                    b.Property<int>("IdeaStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdeaStatusID");

                    b.ToTable("IdeaStatuses");
                });

            modelBuilder.Entity("Qdea.Back.Domain.Impact", b =>
                {
                    b.Property<int>("ImpactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImpactID");

                    b.ToTable("Impacts");
                });

            modelBuilder.Entity("Qdea.Back.Domain.Priority", b =>
                {
                    b.Property<int>("PriorityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PriorityID");

                    b.ToTable("Priorities");
                });

            modelBuilder.Entity("Qdea.Back.Domain.Tag", b =>
                {
                    b.Property<int>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Qdea.Back.Domain.TagIdea", b =>
                {
                    b.Property<int>("TagListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("IdeaID")
                        .HasColumnType("int");

                    b.Property<int?>("TagID")
                        .HasColumnType("int");

                    b.HasKey("TagListID");

                    b.HasIndex("IdeaID");

                    b.HasIndex("TagID");

                    b.ToTable("TagIdeas");
                });

            modelBuilder.Entity("Qdea.Back.Domain.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<int?>("UserStatusID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("UserStatusID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Qdea.Back.Domain.UserStatus", b =>
                {
                    b.Property<int>("UserStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserStatusID");

                    b.ToTable("UserStatuses");
                });

            modelBuilder.Entity("Qdea.Back.Domain.AddedUser", b =>
                {
                    b.HasOne("Qdea.Back.Domain.Idea", "Idea")
                        .WithMany()
                        .HasForeignKey("IdeaID");

                    b.HasOne("Qdea.Back.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Idea");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Qdea.Back.Domain.Idea", b =>
                {
                    b.HasOne("Qdea.Back.Domain.IdeaStatus", "IdeaStatus")
                        .WithMany()
                        .HasForeignKey("IdeaStatusID");

                    b.HasOne("Qdea.Back.Domain.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityID");

                    b.HasOne("Qdea.Back.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("IdeaStatus");

                    b.Navigation("Priority");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Qdea.Back.Domain.IdeaInteraction", b =>
                {
                    b.HasOne("Qdea.Back.Domain.Idea", "Idea")
                        .WithMany()
                        .HasForeignKey("IdeaID");

                    b.HasOne("Qdea.Back.Domain.IdeaInteractionType", "IdeaInteractionType")
                        .WithMany()
                        .HasForeignKey("IdeaInteractionTypeID");

                    b.HasOne("Qdea.Back.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("Idea");

                    b.Navigation("IdeaInteractionType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Qdea.Back.Domain.TagIdea", b =>
                {
                    b.HasOne("Qdea.Back.Domain.Idea", "Idea")
                        .WithMany()
                        .HasForeignKey("IdeaID");

                    b.HasOne("Qdea.Back.Domain.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagID");

                    b.Navigation("Idea");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Qdea.Back.Domain.User", b =>
                {
                    b.HasOne("Qdea.Back.Domain.UserStatus", "UserStatus")
                        .WithMany()
                        .HasForeignKey("UserStatusID");

                    b.Navigation("UserStatus");
                });
#pragma warning restore 612, 618
        }
    }
}
